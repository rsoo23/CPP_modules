access keywords: 
- public: members are accessible outside the class
- private: members cannot be accessed / viewed from outside the class
- protected: members cannot be accessed / viewed from outside the class, but can be inherited

constructors vs methods:
    constructors (initializer):
    - special member function that is automatically called when object of class is created
    - initialize the objects data + allocate resources
    - they do not have a return type

    methods:
    - have to be called explicitly
    - can have different return values

attributes

encapsulation:
- better to do as often as you can
- make sure that sensitive data is hidden from users
- if you want to modify the value of a private member, you need to use get and set methods

this:
    - used to differentiate between member variables of a class to 
      function parameters / local variables that might have the same name
    - use of this is implicit, however it improves code clarity
Ex:
void MyClass::setValue(int value) {
    this->value = value;
}

pragma once
    - marks that specific header file so that it won't be included again during the same 
    compilation process, regardless of how many times it's referenced. 

dynamic allocation
	Class* name = new Class[N] -> must have void constructor
	delete [] name

references and pointers
	- references
		- more intuitive syntax
		- safer, in terms of avoiding null-pointer issues
		- int& num; (you can directly change the value using num = .., while pointers
		need dereferencing)
	- pointers
		- more flexibility
		- can be reassigned to point to different objects

floating point numbers
    - 

fixed point numbers
    - straightforward and efficient (integer arithmetic)
    - loss of range for gain in precision vice versa

friend function
    - a function that is not a member of a class, but is given access to private 
    and protected members of the class

inheritance rules:
	- base class: private, public, protected

	- public inheritance: 
		public preserved
		protected preserved
		private preserved

	- protected inheritance: 
		public -> protected
		protected preserved
		private preserved

	- private inheritance: 
		public -> private
		protected -> private
		private preserved

multiple inheritance
	- let's say we have two base classes with both function1()
	BaseClass1: function1(), BaseClass2: function1()

	and a derived class with function1()
	DerivedClass: public BaseClass1, public BaseClass2
		- when we call derived.function1(), overriding occurs,
		  so the function1() from the derived class is executed

	if the derived class doesn't have function1()
		- when derived.function1() is called:
		- an error occurs since there is a conflict between BaseClass1 
		  BaseClass2 (same function1())

